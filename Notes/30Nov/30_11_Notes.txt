TreeSet Demo 2: 

import java.util.Iterator;
import java.util.TreeSet;

public class TreeSetDemo {
	
	public static void main(String[] args) {
		TreeSet ts = new TreeSet();
		 ts.add("hyderabad");
		 ts.add("banglore");
		 ts.add("Chennai");
		 ts.add("Manglore");
		 ts.add("bihar");
		 ts.add("Assam");
		 System.out.println(ts);
		 Iterator it=ts.descendingIterator();
		  while(it.hasNext()) {
			  System.out.println(it.next());
		  }
		  System.out.println("CONTAINS:"+ts.contains("hyderabad"));
		  System.out.println(ts.first());
		  System.out.println(ts.isEmpty());
		  ts.clear();
		  System.out.println(ts.isEmpty());
	}

}

List: 

List interface is majorly used to store the items in sequential order. 

The implementation classes of List interface are 

1. ArrayList:

   keypoints: 

    * ArrayList is dynamic which means the array gets increased as in when the new objects are added to it. 

    * ArrayList guarantees the order of elements.

     * ArrayList provides important methods to operate on arrays.

     * Duplicate values can be added 

     * We can add different type of values in ArrayList.

     import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

public class ArrayListDemo {
	
	public static void main(String[] args) {
		 ArrayList al = new ArrayList();
		  al.add(10);
		  al.add(100);	
		  al.add("java");	
		  al.add("react");	
		  al.add(true);	
		  al.add(false);
		  al.add(true);	
		  al.add(false);
		  al.add(true);	
		  al.add(false);
		  System.out.println(al);
		  System.out.println(al.contains(true));
		  System.out.println(al.indexOf("java"));
		
		  for(int i=al.size()-1;i >=0; i--) {
			  System.out.println(al.get(i));
		  }
		   ListIterator li = al.listIterator();
		   System.out.println("In Forward Direction");
		   
		     while(li.hasNext()) {
		    	 System.out.print(li.next()+"  ");
		     }
		     
		     System.out.println("In Reverse Direction");
		      
		     while(li.hasPrevious()) {
		    	 System.out.print(li.previous()+ " ");
		     }
		   
	}

}


2. Vector 

