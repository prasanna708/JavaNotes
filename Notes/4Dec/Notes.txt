Thread Life Cycle: 

The Thread Life Cycle has different states such as NEW, RUNNABLE, BLOCKED( TIMED_WAITING), TERMINATED. 


class NewThread extends Thread{
	
	@Override
	public void run() {
		System.out.println("Run method called");
		System.out.println(Thread.currentThread().getName());
		try {
			Thread.sleep(1000); // Blocked State
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("Run method execution is finished by :"+ Thread.currentThread().getName());
		System.out.println("--------------------------------------------------------------------------");	
	}
}
public class ThreadStatesDemo {
	
	public static void main(String[] args) {
		 NewThread t1= new NewThread(); 
		 t1.setName("Thread-One");
		 System.out.println("T1 State:"+ t1.getState());
		 t1.setPriority(9);
		 t1.start();
		 System.out.println("T1 State:"+t1.getState());
		 NewThread t2= new NewThread();
		 t2.setName("Thread-Two");
		 System.out.println("T2 State:"+ t2.getState());
		 t2.setPriority(1);
		 t2.start();
		 System.out.println("T2 State:"+ t2.getState());
		 
		 NewThread t3=  new NewThread(); 
		 t3.setName("Thread- Three");
		 System.out.println("T3 State:"+ t3.getState());
		 t3.start();
		 System.out.println("T3 State:"+ t3.getState());
		 System.out.println("T1 State:"+t1.getState());
		 System.out.println("T2 State:"+t2.getState());
		 
	
		 
	
	}

}


Synchronization: 

It is the process of allowing only one thread to act up on a resource at a time. which means, 
The resource gets locked when a thread started accessing it and the resource gets free only after the 
execution is finished. 

1 ticket 

p1: 10:30:10 -> 1 ticket, printing   p2: 10:30:10 -> 1 ticket, printing


class Booking implements Runnable {
	  int ticketsAvailable = 1;
	public void run() {
		 System.out.println("Tickets Available: "+ ticketsAvailable);
		System.out.println("Booking Request for the Passanger: "+Thread.currentThread().getName());
		  synchronized (this) {
			  if(ticketsAvailable > 0) {
				  System.out.println("Ticket Booked for : " + Thread.currentThread().getName());
				  try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				  ticketsAvailable--;
			  }
			  else {
				  System.out.println("No Tickets Available");
			  }
		}
		  
	}
}
 public class TicketBooking{
	 public static void main(String[] args) {
		Booking b1 = new Booking(); 
		Thread t1 = new Thread(b1);
		t1.setName("P1");
		Thread t2 = new Thread(b1);
		//Booking b2 = new Booking(); 
		t2.setName("P2");
		t1.start();
		t2.start();
	}
 }

















